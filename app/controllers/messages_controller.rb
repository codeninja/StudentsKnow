class MessagesController < ApplicationController
  include ExceptionNotifiable
  local_addresses.clear
  
  before_filter :login_required, :except => [:index, :show,  :bad_record,  :search, :category]
  layout 'home'
  
#  rescue_from ActiveRecord::RecordNotFound, :with => :bad_record
  
  # GET /videos
  # GET /videos.xml
  def index
    #NB: because the base actions in this controller were generated by script/generate "modelname"
    # the index page allows reading it when not logged in, but not posting to it. That is why posting
    #index requires you to be logged in, even though :index is in the :except block.
    store_location
    @message = Message.new()
    @categories = Tag.find(:all,:conditions => 'is_category = 1')
    @messages = {}
    @categories.each{|c| @messages[c.name] = Message.find_tagged_with(c.name, :order => 'created_at desc', :limit => 5)  }
    get_recent_category!      
    @recent_category_messages = Message.find_tagged_with(@recent_category.name, :limit => 5, :order => 'created_at desc')
    get_mb_ads!
    
    @page_title = "Message Board"
    
    respond_to do |format|
      format.html # index.html.erb
    end
  end
  
  def show
    store_location
    @message = Message.find(params[:id])
    @category = Tag.find_by_name(@message.category)
    @comment = @message.comments.new
    
    @page_title = "Message Board - #{strip_dashes @category.name}"
    get_mb_ads!
  end
  
  def new
    @message = Message.new(params[:message])
    @category = Tag.find_by_name((@message.category || params[:category]))
    @message.category ||= @category.name
    @page_title = "Message Board - #{strip_dashes @category.name} - Post Message"
    get_mb_ads!
  end
  
  def create
    @category = Tag.find_by_name(params[:message][:category])
    @message = Message.new(params[:message])
    @message.user_id = self.current_user.id
    return unless User.find(@message.user_id)
    if @message.save
      @message.tagnames = @message.category
      redirect_to message_path(@message)
    else
      render :action => 'new'
    end
  end
  
  def edit
    @message = Message.find(params[:id])
    @category = Tag.find_by_name(@message.category)
    @page_title = "Message Board - #{strip_dashes(@category.name)} - Edit Message"
    get_mb_ads!
  end
  
  def update
    @message = Message.find(params[:id])
    @message.update_attributes(params[:message])
    redirect_to message_path(@message)
  end
  
  def destroy
    message = Message.find(params[:id])
    category = Tag.find_by_name(message.category)
    message.destroy
    redirect_to message_category_path(category.name)
  end
  
  def create_comment
    @message = Message.find(params[:message_id])
    @category = Tag.find_by_name(@message.category)
    @comment = @message.comments.new(params[:comment])
    @comment.title = 'n'
    @comment.user_id = self.current_user.id
    if @comment.save
      redirect_to message_path(@message)
    else
      render :action => 'show'
    end
  end
  
  def edit_comment
    @comment = Comment.find(params[:id])
    @message = @comment.commentable
    @category = Tag.find_by_name(@message.category)
    @page_title = "Message Board - Edit Comment"
    get_mb_ads!
  rescue
    logger.info "WTF?"
  end
  
  def update_comment
    @comment = Comment.find(params[:id])
    @message = Message.find(params[:message_id])
    @comment.update_attributes(params[:comment])
    redirect_to message_path(@message)
  end
  
  def destroy_comment
    message = Message.find(params[:message_id])
    Comment.destroy(params[:id])
    redirect_to message_path(message)
  end

  def category
    store_location
    @category = Tag.find_by_name(params[:id])
    @message = Message.new()
    @messages = Message.find_tagged_with(@category.name, :limit => 5, :order => 'created_at desc')
    @page_title = "Message Board - #{strip_dashes(@category.name)}"
    get_mb_ads!
  end
  
  def search
   # Feed.find(:all, :conditions => ["link LIKE ?" , "%#{params[:search][:item]}%"])
    @messages = Message.find(:all, :conditions => ["topic like ?  OR data like ? ", "%#{params[:message_search][:item]}%", "%#{params[:message_search][:item]}%"])
  end
  
  def bad_record
    respond_to do |format|
      format.html
      format.xml  { head :ok }
    end
  end
  
  private
  
  def get_mb_ads!    
    @message_board_ads = Ad.page(:message_board).zone(:right_top).get.code
    @message_board_ads2 = Ad.page(:message_board).zone(:right_bottom).get.code
    @message_board_ads_left = Ad.page(:message_board).zone(:left_1).get.code
    @message_board_ads_left2 = Ad.page(:message_board).zone(:left_2).get.code
    rescue
      logger.info "Error fetching ads on message board pages"
  end

  def get_recent_category!
    if params[:category]
      @recent_category = Tag.find_by_name(params[:category])
    else
      if (message = Message.find(:first, :order => 'created_at desc'))
        @recent_category = message.tags.select{|t| t.is_category == true}.first
      else
        @recent_category = Tag.find_by_name('site-feedback')
      end
    end
  end
  
end
